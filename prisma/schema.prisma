// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                Int       @id @default(autoincrement())
  userNumber        Int       @unique
  email             String    @unique
  phone             String    @unique
  name              String
  
  avatar            String?
  status	          String?
  team	            String?
  researchFields    String?

  position	        Int?      @default(0)
  duties	          Int?      @default(0)// 0b00000000

  seminarExemption  Boolean   @default(false)

  createdAt	        DateTime  @default(now())
  updatedAt	        DateTime  @updatedAt
  
  presentedSeminars	Seminar[] @relation(name:"presentedSeminar")
  writtenReviews	  Review[]  @relation(name:"writtenReview")

  requests          Request[]

  tokens	          Token[]
  // writtenReviews Review[]
  // receivedReviews Review[]

  managingProjects      ManagingProjectsTable[]
  staffingProjects      StaffingProjectsTable[]
  participatingProjects ParticipatingProjectsTable[]

  createdLogs       Log[]     @relation(name:"createdLog")
}

model Token {
  id          Int       @id @default(autoincrement())
  payload     String    @unique
  
  user        User      @relation(fields:[userId], references:[id], onDelete: Cascade)
  userId      Int
  @@index([userId])

  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt
}

model Semester{
  id Int @id @default(autoincrement())
  alias Int @unique //202201~202204 (2022봄~겨울)

  isCurrentSemester Boolean @default(false)

  postDocCount  Int
  phdCandidateCount Int
  msCandidateCount Int

  seminars      Seminar[]
  reviews       Review[]  
  seminarSlots  Seminarslot[]

  settings      Settings[]
}

model Seminar {
  id            Int       @id @default(autoincrement())
  alias         String    @unique //2022spr-34141-[01~99]
  createdAt	    DateTime  @default(now())
  updatedAt	    DateTime  @updatedAt

  semester      Semester  @relation(fields:[semesterId], references:[id], onDelete: Cascade)
  semesterId    Int
  @@index([semesterId])

  presentedBy   User      @relation(name:"presentedSeminar", fields:[presentedById], references:[id], onDelete: Cascade)
  presentedById Int
  @@index([presentedById])

  // Many-to-Many NOT SUPPORTED IN MYSQL. Bypassing through Review model
  // reviewedBy User[] @relation(name:"reviewedSeminar", fields:[reviewedById], references:[id], onDelete: Cascade)
  // reviewedById Int
  // @@index([reviewedById])

  title         String?
  abstract      String?  @db.Text
  category      String?
  tags          String?  //(TODO: Array.)
  currentStage  Int   ?  //(Enum. No submission, Draft submission, Reviewed, Full submission)
  draftFile     String?
  finalFile     String?

  waiver        Boolean  @default(false)
  skipReview    Boolean  @default(false)
  skipRevision  Boolean  @default(false)
  
  slot          Seminarslot?

  reviews Review[]
}

model Seminarslot{
  id          Int @id @default(autoincrement())
  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt

  semester    Semester @relation(fields:[semesterId], references:[id], onDelete: Cascade)
  semesterId  Int
  @@index([semesterId])

  date        String
  startsAt	  String
  endsAt	    String

  isBreak     Boolean  @default(false)
  note        String?

  // isShow      Boolean  @default(true) // Make it visible/invisible in the Seminar Schedule

  seminar     Seminar? @relation(fields:[seminarId], references:[id])
  seminarId   Int? @unique
  @@index([seminarId])
}

model Review{
  id          Int       @id @default(autoincrement())
  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt

  semester      Semester  @relation(fields:[semesterId], references:[id], onDelete: Cascade)
  semesterId    Int
  @@index([semesterId])

  reviewFor   Seminar   @relation(fields:[seminarId], references:[id], onDelete: Cascade)
  seminarId   Int
  @@index([seminarId])
 
  title      String
  comments   String @db.VarChar(512)

  rating1    Int?
  rating2    Int?
  rating3    Int?
  rating4    Int?
  rating5    Int?
  rating6    Int?

  writtenBy   User      @relation(name:"writtenReview", fields:[writtenById], references:[id], onDelete:Cascade)
  writtenById Int
  @@index([writtenById])
}


model Request{
  id          Int       @id @default(autoincrement())
  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt

  requestedFor User      @relation(fields:[userId], references:[id], onDelete: Cascade)
  userId      Int
  @@index([userId])

  kind        Int //(Enum. announcement, carry-out, credit-card, purchase, business-trip, review)
  payload1    String  //requested user id
  payload2    String? //id of requesting item. (e.g.semester id, seminar id, etc.) 
  payload3    String? //reserved.
  payload4    String? //reserved.
  payload5    String? //reserved.
  payload6    String? //reserved.
  payload7    String? //reserved.
  payload8    String? //reserved.
  payload9    String? //reserved.
  payload10   String? @db.VarChar(512)//reserved.
  payload11   String? @db.VarChar(512)//reserved.

  due         DateTime
  decidedAt   DateTime?
  completedAt DateTime?
  completedBy String? //record User Id.
  
  status      Int //(Enum. Pending, Accepted(Processing), Delayed, Rejected)
  // 세미나 관련 request 및 status는 모두 유지
  // 나머지의 경우 처리 완료되면 레코드 삭제.

  relatedAction Action?
}

model Project{
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt	    DateTime  @updatedAt

// [CREATE, EDIT]
  title         String
  alias         String    @unique //G00000000
  type          String //정산여부

  startDate	    String
  endDate	      String

  teamInCharge  String

  scale         Int // 100, 200, 300 (소/중/대)

  mpePlanned    Int // MPE: Material Purchasing Expenses
  mpeBalance    Int 
  mpeExeRate    Int @default(0) // Execution Rate 000 (Last number is the first digit after decimal point)
  cpePlanned    Int // CPE: Computer Purchasing Expenses
  cpeBalance    Int
  cpeExeRate    Int @default(0) 
  dtePlanned    Int // DTE: Domestic Traveling Expenses
  dteBalance    Int
  dteExeRate    Int @default(0) 
  otePlanned    Int // OTE: Overseas Traveling Expenses
  oteBalance    Int
  oteExeRate    Int @default(0) 
  mePlanned     Int // ME: Meeting Expenses`
  meBalance     Int 
  meExeRate     Int @default(0) 
  aePlanned     Int // AE: Accomodation Expenses
  aeBalance     Int 
  aeExeRate     Int @default(0) 
  // 

  // Balance는 최초 Create시 Cost와 동일한 값으로 설정됨. 
  // Edit에서 Cost값을 변경하는 경우, 기존 Cost에서의 차액만큼을 Balance에 누산
  // Tooltip: 오차 발생 시, request 기능을 통해 보정할 것.
  // accomodation cost(수용비)


  note            String @db.VarChar(512)

// [SET]
  isFinished      Boolean     @default(false) //완료된 과제를 리스트에서 제거할수 있도록.

  managers        ManagingProjectsTable[]
  staffs          StaffingProjectsTable[]
  participants    ParticipatingProjectsTable[]
  // staffs User[]
  // participants User[]

}

model ManagingProjectsTable{ //PIVOT TAVLE
  project     Project  @relation(fields: [projectId], references:[id])
  projectId   Int
  @@index([projectId])

  user        User     @relation(fields: [userId], references:[id])
  userId      Int
  @@index([userId])

  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt

  @@id([userId, projectId])
}

model StaffingProjectsTable{ //PIVOT TAVLE
  project     Project  @relation(fields: [projectId], references:[id])
  projectId   Int
  @@index([projectId])

  user        User     @relation(fields: [userId], references:[id])
  userId      Int
  @@index([userId])

  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt

  @@id([userId, projectId])
}

model ParticipatingProjectsTable{ //PIVOT TAVLE
  project     Project  @relation(fields: [projectId], references:[id])
  projectId   Int
  @@index([projectId])

  user        User     @relation(fields: [userId], references:[id])
  userId      Int
  @@index([userId])

  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt

  @@id([userId, projectId])
}

model Action{
  id             Int       @id @default(autoincrement()) 

  createdAt      DateTime  @default(now())
  updatedAt	     DateTime  @updatedAt

  relatedRequest Request   @relation(fields:[requestId], references:[id], onDelete: Cascade)
  requestId      Int       @unique
  @@index([requestId])

  kind        Int
  payload1    String  //action created by user id
  payload2    String? //action created by user name
  payload3    String? //relatedProject Alias
  payload4    String? //relatedProject Title
  payload5    String? //Category to use
  payload6    String? //Item to purchase
  payload7    String? //Qty.
  payload8    String? //Payment method.
  payload9    String? //Total Price to pay.
  payload10   String? @db.VarChar(512) //Message.
  payload11   String? @db.VarChar(512) //reserved.

  due         DateTime
  completedAt DateTime?
  status      Int //(Enum. Pending, Accepted(Processing), Delayed, Rejected)
}

model Settings{
  id          Int       @id @default(autoincrement())

  currentSemester Semester  @relation(fields:[currentSemesterId], references:[id], onDelete: Cascade)
  currentSemesterId    Int
  @@index([currentSemesterId])
  
}

model Log{
  id          Int       @id @default(autoincrement())
  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt
  
  loggedBy    User      @relation(name:"createdLog", fields:[loggedById], references:[id]) //onDelete:
  loggedById  Int
  @@index([loggedById])

  category    String
  message     String
  whois       String?
}