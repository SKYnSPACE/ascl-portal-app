// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int       @id @default(autoincrement())
  userNumber  Int       @unique
  email       String    @unique
  phone       String    @unique
  name        String
  avatar      String?
  status	    String?
  team	      String?
  position	  Int?      @default(0)
  duties	    Int?      @default(0)// 0b00000000
  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt
  presentedSeminars	Seminar[]  @relation(name:"presentedSeminar")
  writtenReviews	  Review[]   @relation(name:"writtenReview")

  requests          Request[]

  tokens	          Token[]
  // writtenReviews Review[]
  // receivedReviews Review[]
}

model Token {
  id          Int       @id @default(autoincrement())
  payload     String    @unique
  
  user        User      @relation(fields:[userId], references:[id], onDelete: Cascade)
  userId      Int
  @@index([userId])

  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt
}

model Semester{
  id Int @id @default(autoincrement())
  alias Int @unique //202201~202204 (2022봄~겨울)

  isCurrentSemester Boolean @default(false)

  postDocCount  Int
  phdCandidateCount Int
  msCandidateCount Int

  seminars      Seminar[]
  reviews       Review[]  
  seminarSlots  Seminarslot[]

  settings      Settings[]
}

model Seminar {
  id            Int       @id @default(autoincrement())
  alias         String    @unique //2022spr-34141-[01~99]
  createdAt	    DateTime  @default(now())
  updatedAt	    DateTime  @updatedAt

  semester      Semester  @relation(fields:[semesterId], references:[id], onDelete: Cascade)
  semesterId    Int
  @@index([semesterId])

  presentedBy   User      @relation(name:"presentedSeminar", fields:[presentedById], references:[id], onDelete: Cascade)
  presentedById Int
  @@index([presentedById])

  // Many-to-Many NOT SUPPORTED IN MYSQL. Bypassing through Review model
  // reviewedBy User[] @relation(name:"reviewedSeminar", fields:[reviewedById], references:[id], onDelete: Cascade)
  // reviewedById Int
  // @@index([reviewedById])

  title         String?
  abstract      String?  @db.Text
  category      String?
  tags          String?  //(TODO: Array.)
  progress      Int   ?  //(Enum. No submission, Draft submission, Reviewed, Full submission)
  draftFile     String?
  finalFile     String?

  slot          Seminarslot?

  reviews Review[]
}

model Seminarslot{
  id            Int @id @default(autoincrement())

  dateTime	    DateTime  

  semester Semester @relation(fields:[semesterId], references:[id], onDelete: Cascade)
  semesterId Int
  @@index([semesterId])

  seminar Seminar? @relation(fields:[seminarId], references:[id])
  seminarId Int? @unique
  @@index([seminarId])
}

model Review{
  id          Int       @id @default(autoincrement())
  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt

  semester      Semester  @relation(fields:[semesterId], references:[id], onDelete: Cascade)
  semesterId    Int
  @@index([semesterId])

  reviewFor   Seminar   @relation(fields:[seminarId], references:[id], onDelete: Cascade)
  seminarId   Int
  @@index([seminarId])
 
  title      String
  comments   String

  rating1    Int?
  rating2    Int?
  rating3    Int?
  rating4    Int?
  rating5    Int?
  rating6    Int?

  writtenBy   User      @relation(name:"writtenReview", fields:[writtenById], references:[id], onDelete:Cascade)
  writtenById Int
  @@index([writtenById])
}


model Request{
  id          Int       @id @default(autoincrement())
  createdAt	  DateTime  @default(now())
  updatedAt	  DateTime  @updatedAt

  requestedFor User      @relation(fields:[userId], references:[id], onDelete: Cascade)
  userId      Int
  @@index([userId])

  kind        Int //(Enum. announcement, carry-out, credit-card, purchase, business-trip, review)
  payload1    String  //requested user id
  payload2    String? //id of requesting item. (e.g.semester id, seminar id, etc.) 
  payload3    String? //reserved.
  payload4    String? //reserved.
  payload5    String? //reserved.
  payload6    String? //reserved.
  payload7    String? //reserved.
  payload8    String? //reserved.

  due         DateTime
  status      Int //(Enum. Pending, Accepted(Processing), Delayed, Rejected)
  // 세미나 관련 request 및 status는 모두 유지
  // 나머지의 경우 처리 완료되면 레코드 삭제.
}

model Settings{
  id          Int       @id @default(autoincrement())

  currentSemester Semester  @relation(fields:[currentSemesterId], references:[id], onDelete: Cascade)
  currentSemesterId    Int
  @@index([currentSemesterId])
  
}